task wrapper(type: Wrapper) {
    gradleVersion = '1.10'
}

def isReleaseBuild() {
    return !version.endsWith("SNAPSHOT")
}

allprojects {
    apply plugin: 'idea'

    version = VERSION_NAME
    group = GROUP

    repositories {
        mavenCentral()
    }
}

subprojects {
    apply plugin: 'java'

    dependencies {
        testCompile 'commons-io:commons-io:2.4'
        testCompile 'org.hamcrest:hamcrest-library:1.3'
        testCompile 'org.mockito:mockito-core:1.9.5'
        testCompile 'junit:junit:4.11'
    }

    jar {
        manifest {
            attributes("Implementation-Vendor": "Keen.io", "Implementation-Version": version)
        }
    }

    test {
        include '**/*Test.class'
    }

    apply from: '../maven_publish.gradle'
}

project(':android') {
    dependencies {
        compile project(':core')
    }
}

project(':java') {
    dependencies {
        compile project(':core')
    }
}

// Get required passwords from either console or dialog. Adapted from:
// https://www.timroes.de/2014/01/19/using-password-prompts-with-gradle-build-files/
gradle.taskGraph.whenReady { taskGraph ->
    if (taskGraph.allTasks.any { it.name.contains("uploadArchives") }) {
        println "Task graph requires signing"
        def signPw = getPassword("Enter GPG secret key passphrase")
        def sonatypePw = getPassword("Enter sonatype password")
        allprojects { ext."signing.password" = signPw }
        allprojects { ext."sonatypePassword" = sonatypePw }
    } else {
        println "Skipping signing"
        taskGraph.allTasks.findAll {
            it instanceof Sign
        }.each {
            it.enabled = false
        }
    }
}

import groovy.swing.SwingBuilder

String getPassword(String prompt) {
    def pass = ''
    if (System.console() == null) {
        new SwingBuilder().edt {
            dialog(modal: true, // Otherwise the build will continue running before you closed the dialog
                title: 'Enter password', // Dialog title
                alwaysOnTop: true, // pretty much what the name says
                resizable: false, // Don't allow the user to resize the dialog
                locationRelativeTo: null, // Place dialog in center of the screen
                pack: true, // We need to pack the dialog (so it will take the size of it's children)
                show: true // Let's show it
            ) {
                vbox { // Put everything below each other
                    label(text: prompt)
                    def input = passwordField()
                    button(defaultButton: true, text: 'OK', actionPerformed: {
                        pass = input.password; // Set pass variable to value of input field
                        dispose(); // Close dialog
                    })
                } // vbox end
            } // dialog end
        } // edt end
    } else {
        pass = System.console().readPassword("\n" + prompt)
    }

    pass = new String(pass)
    if (pass.size() <= 0) {
        throw new InvalidUserDataException("You must enter a password to proceed.")
    }

    return pass
}
